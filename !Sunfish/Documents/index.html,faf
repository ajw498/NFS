<!-- $Id$ -->
<!-- $URL$ -->
<html>
<head>
  <title>Sunfish NFS client</title>
</head>

<body bgcolor="#ffffff" text="#000000">
<p align="center"><img src="title.png" alt="Sunfish" border=0>

<p>

<b>Blackbanded Sunfish</b>, <i>Enneacanthus chaetodon</i><br>
A 30-60mm long fish with a very compressed, deep body, a thin pointed pectoral fin and round tail fin. Habitat: swamps, ponds and river pools.
<p>
<b>Sunfish</b><br>
An NFS client, implemented as an image filing system. Habitat: RISC OS.


<p>
<table bgcolor="#00449a" fgcolor="ffffff" width="99%"><tr><td>
<h2><font color="#ffffff">Contents</font></h2>
</td></tr></table>
<ul>
<li><a href="#license">License</a><br>
<li><a href="#requirements">Requirements</a><br>
<li><a href="#setup">Setting up a Mount</a><br>
<li><a href="#options">Options</a><br>
<li><a href="#performance">Improving Performance</a><br>
<li><a href="#reportingbugs">Reporting Bugs</a><br>
<li><a href="#knownbugs">Known Bugs</a><br>
<li><a href="#recompiling">Recompiling</a><br>
</ul>


<table bgcolor="#00449a" fgcolor="ffffff" width="99%"><tr><td>
<h2><font color="#ffffff"><a name="license">License</a></font></h2>
</td></tr></table>

<p>
Sunfish is copyright &copy; 2003 <a href="mailto:alex@alexwaugh.com">Alex Waugh</a>
<p>
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
<p>
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
<p>
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
<p>

<table bgcolor="#00449a" fgcolor="ffffff" width="99%"><tr><td>
<h2><font color="#ffffff"><a name="requirements">Requirements</a></font></h2>
</td></tr></table>
<p>
Sunfish requires a working network connection and an NFS server to connect to. The server should be running version 2 of the NFS protocol, version 1 of the Mount protocol, version 2 of the portmapper protocol, and optionally version 2 of the pcnfsd protocol. It has currently only been tested with the Linux kernel server present in Debian Woody, but it should work with other servers. Only UDP connections are supported at present.
<p>
Sunfish should run on any version of RISC OS from 3.11 onwards. It has been reported to work on RISC OS 3.7, RISC OS 4 (including under Virtual RPC), Select, and RISC OS 5. It is 26/32bit neutral.
<p>
Sunfish is known to work with the Linux 2.4 kernel server, and a Solaris 7/8 server. It partially works with Allegro NFSd 1.1.4 on Windows, but a bug in that version of the server can cause file not found errors when copying files onto the server.
<p>
Any updates will be available from <a href="http://www.alexwaugh.com/">http://www.alexwaugh.com/</a>

<p>
<table bgcolor="#00449a" fgcolor="ffffff" width="99%"><tr><td>
<h2><font color="#ffffff"><a name="setup">Setting up a mount</a></font></h2>
</td></tr></table>
<p>
Sunfish is implemented as an image filing system. Currently you have to setup a mount file by hand, but in future versions a frontend may be supplied.
<p>
Ensure the Sunfish module is loaded by double clicking on !Sunfish. Then, using your favorite<!-- <message type="subliminal">StrongED</message> --> text editor create a file with the appropriate options as described below. Save this, then set it's filetype to Sunfish (&1b6). The double click on the mount file you have just created and the server will be mounted and you can navigate the filesystem as normal.

<h3>Example mount files</h3>
<p>
This is a very simple mount file. It will use pcnfsd to map the username and password onto a uid and gid.
<pre>
Protocol: NFS2
Server: mint.cp15.org
Export: /home/ajw498
Username: ajw498
Password: fiddlesticks
</pre>
<p>
The same as above, but specifying the uid and gid explicitly. pcnfsd is not required in this case, and there is no need for the password to be stored in the file either.
<pre>
Protocol: NFS2
Server: mint.cp15.org
Export: /home/ajw498
UID: 1001
GID: 50
</pre>
<p>
A more complex example.
<pre>
Protocol: NFS2
Server: mint.cp15.org
Export: /tmp
UID: 1002
GID: 51
GIDs: 52 53 105
umask: 066
MachineName: caramel
ShowHidden: 0
Timeout: 5
Retries: 0
DefaultFiletype: FFF
AddExt: 2
MaxDataBuffer: 8192
Pipelining: 1
</pre>

<h3>Filenames</h3>
Filenames on a unix machine may contain characters that are illegal in RISC OS filenames. In order to allow access to such files, any illegal characters are changed into escape sequences of <code>?xx</code> where xx is the hexadecimal value of the character. Spaces are mapped onto hard spaces, dots map to slashes and vice versa, and other characters are unchanged.
<p>
Unlike most other RISC OS filing systems, filenames may be case sensitive (depending on the casesensitive option). However, it is not recommended to use filenames that differ only in their case, as some programs or RISC OS may not distinguish between them correctly.
<p>
<table bgcolor="#00449a" fgcolor="ffffff" width="99%"><tr><td>
<h2><font color="#ffffff"><a name="options">Options</a></font></h2>
</td></tr></table>
<p>
Any line beginning with a # is treated as a comment. 

<h3>Mandatory options</h3>
These options must appear in the file for a working connection to be established. Either a uid and gid must be specified <em>or</em> a username and password.
<p>
<h4>Protocol</h4>
Specifies the protocol to use. An error will be generated in the current version if this is not NFS2.
<p>
<h4>Server</h4>
The domain name or ip address of the NFS server.
<p>
<h4>Export</h4>
The name of the exported directory to mount. This should match one of the entries in /etc/exports or equivalent on the server.
<p>
<h4>UID</h4>
The user id to use. If this is not specified, then a username and password should be specified instead.
<p>
<h4>GID</h4>
The group id to use. If this is not specified, then a username and password should be specified instead.
<p>
<h4>Username</h4>
The username to connect as. If specified, then pcnfsd will be used to map the username and password to a uid and gid. If not specified, or pcnfsd is not available, then the uid and gid should be specified instead.
<p>
<h4>Password</h4>
The password to give to pcnfsd with the username. This password has to be stored in the file in plain text, so if that is a concern then you should specify the uid/gid instead.
<p>
<h3>Optional options</h3>
These options can be specified if needed, but if they are not then default values will be used. For most connections, the defaults will be sufficient.
<p>
<h4>MachineName</h4>
The name of the machine the client is running on. Some servers may use it to allow or deny access. If omitted, it defaults to the value of <code>&lt;Inet$Hostname&gt;</code> which should be sufficient in most cases.
<p>
<h4>MaxDataBuffer</h4>
The maximum number of bytes to use for the data buffer of a read or write request. A bigger buffer will generally be faster than a smaller one, but some network cards (In particular, the Castle 100BaseT podule) cannot handle larger packets. The maximum value is 8192 bytes, and it is recommeded that you set it to this if your network card can handle it (You will probably get timeout errors when reading a large file if it is too big). If omitted, it defaults to 4096 bytes.
<p>
<h4>Pipelining</h4>
If set to 0, then all operations wait for a reply before sending the next request. If set to 1, then for file reads and writes new requests are sent before the reply from the previous request is recieved. This can give an increase in speed in some circumstances. If ommitted, it defaults to 0.  
<p>
<h4>PortMapperPort</h4>
The port number to use for the portmapper service. If omitted, it defaults to the assigned number 111.
<p>
<h4>MountPort</h4>
The port number to use for the mount service. If omitted, the portmapper service will be used to find the correct port.
<p>
<h4>NFSPort</h4>
The port number to use for NFS. If omitted, the portmapper service will be used to find the correct port.
<p>
<h4>PCNFSDPort</h4>
The port number to use for PCNFSD. If omitted, the portmapper service will be used to find the correct port.
<p>
<h4>LocalPort</h4>
The port number to use for the client. This option can either be a single number to use a specific port, or a two numbers spearated by a space to give a range of ports from which a free one will be chosen. If a port number of 0 is specified then any free port above 1024 will be used. If ommitted, the default range of 800-900 will be used.
<p>Generally, it doesn't matter what port is used, but some servers will only allow connections from ports less than 1024 unless the insecure option is used in /etc/exports on the server.
<p>
<h4>GIDs</h4>
A list of additional group ids that the user is part of. There can be up to 16 gids in the list, separated by whitespace. If pcnfsd is used then the list returned by that will override this setting.
<p>
<h4>Logging</h4>
If set to 1 then all operations will be reported to syslog. This should only be enabled for debugging, as it significantly slows things down. Note: if one connection specifies logging, then activity on all connections will be logged while that connection is mounted.
<p>
<h4>umask</h4>
The umask to use, specified in octal. All operations that modify a files attributes will have the Unix mode bits modified according to the umask. If not specified, it defaults to 022. If pcnfsd is used then the umask returned by that will override this setting.
<p>
<h4>unumask</h4>
RISC OS does not have any concept like a umask - the default attributes of a file are decided by the application that creates the file. Usually the default chosen is private read/write set and public read/write clear. The unumask allows you to force particular unix mode bits to be set, and is specified in octal in the same format as the umask. If not specified, it defaults to 0.
<p>
The RISC OS attributes are first converted to unix mode bits, with the private attributes mapping to user permissions, and the public attributes mapping to the group and others permissions (if a public attribute is set then both the corresponding group and others permission bit will be set). This value is then ORed with the unumask, and then ANDed with the inverse of the umask to give the final unix mode bits.
<p>
<h4>ShowHidden</h4>
If set to 1, all files will be shown, if set to 0 then all files beginning with a . will be hidden from filer views. If not specified, then it defaults to 1.
<p>
<h4>FollowSymLinks</h4>
The number of levels of symlinks to follow. If set to zero or a sequence of symlinks greater than the number is encountered then the link will be shown as a text file that you cannot read or write. If not specified, then it defaults to 5. Symlinks can only be followed if they point to a file within the mount directory or its children.
<p>
<h4>CaseSensitive</h4>
If set to 1, filenames will be treated as case sensitive, and if the filename doesn't match exactly then you will get a file not found error. If set to 0, then if an exact match for the filename isn't found then a case insensitive match will be tried as well. If not specified, then it defaults to 0.
<p>
If case sensitivity is off, and you have two (or more) files in the same directory that differ only in case then trying to access one of them may result in the wrong file being altered.
<p>
Currently, this feature only works for leafnames; the rest of the pathname is always treated case sensitivly.
<p>
<h4>Timeout</h4>
The time in seconds to wait for a reply from the server before retrying or giving up. Defaults to 3 seconds.
<p>
<h4>Retries</h4>
The number of times to resend a request if no reply is received. Defaults to 2 retries.
<p>
<h4>DefaultFiletype</h4>
The hexadecimal filetype to give a file if it doesn't have an ,xyz extension or a . extension that matches a mimemap entry. If not specified then it defaults to FFF.
<p>
<h4>AddExt</h4>
Controls adding of a ,xyz extension. When 0, no ,xyz extensions are added, and all files get the default filetype. When 1, a ,xyz extension is only added when necessary. If the file has a . extension that matches a mimemap entry then no extension is added. When 2, a ,xyz extension is always added. If not specified, the default is 1.
<p>

<table bgcolor="#00449a" fgcolor="ffffff" width="99%"><tr><td>
<h2><font color="#ffffff"><a name="performance">Improving Performance</a></font></h2>
</td></tr></table>
<p>
There are two options that are likely to have an effect on performance: the MaxDataBuffer option and the Pipelining option.
<p>
Normally, the bigger the data buffer the better (the maximum size is 8192), however some network cards (notable the Castle 100bT podule) cannot cope with large packet sizes. I suggest you try setting it to 8192, and if you start getting timeout errors when transferring files then reduce it.
<p>
The pipelining option (which is disabled by default) allows file read and write requests to be pipelined which can give around a 20% increase in speed. However, with some servers or network setups it could make things slower. If, for example, your server is running on a 100bT segment while the client is the other side of a switch on a 10bT segment then it is likely to make things worse, but if the server and client are of comparable speeds on the same segment then it may make things faster.
<p>
The server can also have a large influence on the speed. For example, if I read a 30MB file from the server it may take 14 seconds, but if I then read it a second time it take less than half that time because of the filesystem caching on the server.
<p>
The following table shows the maximum speeds I have obtained with various settings, and a comparison with LanManFS. If you are seeing significantly slower results then it may be worth experimenting with the above options. All the tests were copying a 68MB file using the filer with the faster option set. I think the server writing the file to disc is the limiting factor in the 100bT write tests.
<p>
<table border="1">
<tr>
<th></th><th>LanManFS on Iyonix 100bT</th><th>Sunfish on SA RPC, Simtec 100bT</th><th>Sunfish on Iyonix, 100bT</th>
</tr>
<tr>
<td>Read</td><td>2.4MB/s</td><td>0.98MB/s</td><td>5.6MB/s</td>
</tr>
<tr>
<td>Write</td><td>1.8MB/s</td><td>0.68MB/s</td><td>1.8MB/s</td>
</tr>
</table>
<p>

<table bgcolor="#00449a" fgcolor="ffffff" width="99%"><tr><td>
<h2><font color="#ffffff"><a name="reportingbugs">Reporting Bugs</a></font></h2>
</td></tr></table>
<p>
If you discover a bug, please report it to <a href="mailto:alex@alexwaugh.com">me</a>, or better still fix it yourself and send me a patch. When reporting a bug, first load <a href="http://www.compton.nu/syslog.html">SysLog</a>, then set the logging option in your mount file before doing the operation that triggers the bug. A log file should be generated in !SysLog.Logs.Sunfish. If you have access to a machine that can run a packet sniffer such as ethereal then it would be very useful to use that to save a dump of the network traffic along with the syslog file. Also, please provide a description of the problem and exactly what operation you were doing to trigger the bug, and details of what OS and NFS version the server is running would be helpful, and the version of the Sunfish module and RISC OS version.
<p>
<table bgcolor="#00449a" fgcolor="ffffff" width="99%"><tr><td>
<h2><font color="#ffffff"><a name="knownbugs">Known Bugs</a></font></h2>
</td></tr></table>
<p>
The leafname returned from an OS_File 0 call will be in Unix format and may still have a ,xyz extension. This is only used for printing *opt 1 info so is not crucial. The PRMs state that *opt 1 may not work correctly on RISC OS 3 onwards anyway.
<p>
Wildcards in filenames are not supported. This would be a lot of hassle to implement for little benefit, and in any case I believe that it really should be fileswitch's job to sort out wildcards, not each and every filing system.
<p>
Devices and other non regular files are not supported, as they don't map to RISC OS functionality.
<p>
If ShowHidden == 0 and you try to delete a directory that contains hidden files then it will fail with a directory not empty error.
<p>
If more than four concurrent OS_GBPB directory enumerations take place per mount then incorrect results may be returned. There is not much I can do about this, but it is extremely unlikely to occur.
<p>
Deleting a directory containing many files from the filer may sometimes fail with a directory not empty error message.
<p>
Case insensitive matching only works for the leafname, the rest of the pathname is always treated as case sensitive at present.
<p>
Some operations are not as fast as they could be. For the first release I have concentrated on getting a functional and stable program, and there are some places where performance could be improved in the future. In particular, file attributes and mappings between filenames and NFS file handles should be cached, as this would reduce network traffic and delay for directory listings and many other operations.
<p>
<table bgcolor="#00449a" fgcolor="ffffff" width="99%"><tr><td>
<h2><font color="#ffffff"><a name="recompiling">Recompiling</a></font></h2>
</td></tr></table>
<p>
Full source code is provided. To recompile the module, you will need Norcroft v5.53 or later, cmhg 5.42 or later, TCPIPLibs, and Perl. Earlier 26bit versions of Norcroft will not work because the code makes use of 64bit integers and some C99 functions.
<p>
For some unknown reason, if you use amu then it will give an error <code>AMU: Don't know how to make 'o.pcnfsd-calls'</code> after generating pcnfsd-calls.c, but if you rerun amu then it will work. GNU make does not give this problem.

</body>
</html>
